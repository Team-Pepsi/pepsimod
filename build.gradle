/*
 * Adapted from The MIT License (MIT)
 *
 * Copyright (c) 2016-2020 DaPorkchop_
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * Any persons and/or organizations using this software must include the above copyright notice and this permission notice,
 * provide sufficient credit to the original authors of the project (IE: DaPorkchop_), as well as provide a link to the original project.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

import java.util.concurrent.atomic.AtomicReference

buildscript {
    repositories {
        jcenter()
        maven {
            name = "MinecraftForge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "SpongePowered"
            url = "http://repo.spongepowered.org/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "org.spongepowered:mixingradle:0.6-SNAPSHOT"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "org.spongepowered.mixin"
apply plugin: "java"

ext {
    //general things
    javaVersion = "1.8"
    pepsimodVersion = "12.0"

    //minecraft things
    mcpmappingsVersion = "stable_39"
    minecraftforgeVersion = "14.23.5.2836"
    minecraftVersion = "1.12.2"

    //dependency things
    guavaVersion = "21.0"
    lombokVersion = "1.18.8"
    mixinVersion = "0.7.11-SNAPSHOT"
    porklibVersion = "0.4.0-SNAPSHOT"
}

group "net.daporkchop"
version "$pepsimodVersion"

compileJava {
    sourceCompatibility = targetCompatibility = "$javaVersion"
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

configurations {
    shade
    compile.extendsFrom shade

    all {
        resolutionStrategy {
            force("com.google.guava:guava:$guavaVersion")
        }
    }
}

minecraft {
    version = "$minecraftVersion-$minecraftforgeVersion"
    runDir = "run"
    mappings = "$mcpmappingsVersion"
    makeObfSourceJar = false
}

repositories {
    mavenLocal()
    maven {
        name = "DaPorkchop_"
        url = "https://maven.daporkchop.net/"
    }
    maven {
        name = "spongepowered-repo"
        url = "http://repo.spongepowered.org/maven/"
    }
    mavenCentral()
}

dependencies {
    shade("org.spongepowered:mixin:$mixinVersion") {
        exclude module: "launchwrapper"
        exclude module: "guava"
        exclude module: "gson"
        exclude module: "commons-io"
        exclude module: "log4j-core"
    }
    annotationProcessor("org.spongepowered:mixin:$mixinVersion")

    shade "net.daporkchop.lib:common:$porklibVersion"

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version": "$pepsimodVersion-$minecraftVersion", "mcversion": "$minecraftVersion"
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
    rename '(.+_at.cfg)', 'META-INF/$1' //i hate gradle for not letting me use double quotes here
}

mixin {
    defaultObfuscationEnv searge
    add sourceSets.main, "mixins.pepsimod.refmap.json"
}

reobf.jar {
    mappingType = "SEARGE"
    classpath = sourceSets.main.compileClasspath
}

jar {
    archiveName "pepsimod-v$pepsimodVersion-$minecraftVersion" + ".jar"

    from {
        configurations.shade.collect {
            it.isDirectory() ? it : zipTree(it)
        }.unique(true)
    } {
        exclude "META-INF/*"
        exclude "LICENSE.txt"
        exclude "dummyThing"
    }

    manifest {
        attributes(
                "MixinConfigs": "" +
                        "mixin/pepsimod/mixins.events.json," +
                        "mixin/pepsimod/mixins.hacks.json," +
                        "mixin/pepsimod/mixins.optimization.json," +
                        "mixin/pepsimod/mixins.tweaks.json," +
                        "mixin/pepsimod/mixins.utilities.json,",
                "tweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "FMLCorePluginContainsFMLMod": "true",
                "FMLCorePlugin": "net.daporkchop.pepsimod.asm.PepsimodMixinLoader",
                "ForceLoadAsMod": "true",
                "FMLAT": "pepsimod_at.cfg"
        )
    }
}

//sets JVM args for genIntellijRuns
AtomicReference<String> mixinPath = new AtomicReference<>(null);
configurations.compile.each {
    String absolutePath = it.absolutePath
    if(absolutePath.contains("mixin")) {
        mixinPath.set(absolutePath)
    }
}
if (mixinPath != null)  {
    minecraft.clientJvmArgs = minecraft.serverJvmArgs = Arrays.asList(
            "-Dfml.coreMods.load=net.daporkchop.pepsimod.asm.PepsimodMixinLoader",
            "-Dmixin.checks.interfaces=true",
            "-Dmixin.debug.export=true",
            "-Dmixin.debug.verbose=true",
            "-Dmixin.hotSwap=true",
            "-javaagent:" + mixinPath,
            "-Xmx2G",
            "-XX:+UseG1GC",
            "-ea",
            "-da:io.netty..."
    )
} else {
    throw new IllegalStateException("Unable to find mixin path!")
}
